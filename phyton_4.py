# -*- coding: utf-8 -*-
"""Phyton-4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rNisThseuuBIx72e5dUAeBT72ypWP9sy

### **Searching Strings endswith() ve startswith() Methodları**

.startswith(prefix[, start[, end]])

.endswith(prefix[, start[, end]])
"""

# Bu iki fonksiyonun çıktıları boolen (True/False) tipinde olur
text = 'www.clarusway.com'  
print(text.endswith('.com'))     # text değişkeninin sonu .com mu? demektir
print(text.startswith('http:'))  # text değişkeninin başı http: mi? demektir

text = 'www.clarusway.com'
print(text.endswith('om'))
print(text.startswith('w'))
# Remember! Characters of string count from left to right and start with zero.

text = 'www.clarusway.com'
print(text.endswith('.co')) # İlk ve son karakterler birebir uymalı
print(text.startswith('w.'))

email = "clarusway@clarusway.com is my e-mail address"
print(email.startswith("@", 9))  # email değişkeninin baştan 9. karakteri @ mi demektir
print(email.endswith("-", 10, 32)) # email değişkeninin 10.indexinden aramaya başla 31.indexi (32-1) '-' mi demektir.
                                   # Fakat 32 yi 33 veya 31 yap o zaman sonuç False olur. Çünkü o zaman 32.(33-1) ve 30.(31-1) indexler '-' mi bakar olmadığı için False verir
print(email.endswith("-", 10, 33))
print(email.endswith("-", 10, 31))

email="clarusway@clarusway.com is my e-mail adress"
print (email.startswith("i",15))  # inde[15] "i" mi demektir
print (email.endswith("e",10,31)) # index[10] dan başlayarak ara ve (31-1) index[30] "e" mi? demektir

phrase = "myemailaddress@clarusway.com"

print(len(phrase))  # len() fonksiyonu kelimenin uzunluğunu vermektedir
print(phrase.startswith("@", 14)) # index[14] "@" mi? demektir.
print(phrase.endswith(".", 15, 24)) # index[15] ten aramaya başla ve index[23] (24-1) "." mı? demektir

"""# **Stringleri Değiştirme Methodları**

- str.replace(old, new[, count]) replaces all occurrences of old with the new.

- str.swapcase() converts upper case to lower case and vice versa.

- str.capitalize() changes the first character of the string to the upper case  and the rest to the lower case.

- str.upper() converts all characters of the string to the upper case.

- str.lower() converts all characters of the string to the lower case.

- str.title() converts the first character of each word to upper case.
"""

sentence = "I live and work in VirgiNIA"

print(sentence.upper())  # Hepsini büyük harf yaptı

print(sentence.lower())  # Hepsini küçük harf yaptı

print(sentence.swapcase())  # Büyük harfleri küçük, küçük harfleri büyük yaptı

print(sentence.title())  # Her kelimenin ilk harfini büyük harf yaptı, diğerlerinde de büyük varsa küçük yapar

print(sentence)  # note that, source text is unchanged, Görüleceği üzere hiçbirisi orjinal texti değiştirmedi ama

var_str = 'In God we Trust'
var_str = var_str.lower() # Bu şekilde işlem görmüş halini tekrar kendisine atayabiliriz
print(var_str)

"""The replace() method can take maximum of 3 parameters:

old - old substring you want to replace

new - new substring which will replace the old substring

count (optional) - the number of times you want to replace the old substring with the new substring
"""

sentence = "I live and work in Virginia"
title_sentence = sentence.title() 
print(title_sentence)  

changed_sentence = sentence.replace("i", "+") # replace() kodu ilkini ikinci karakter ile değiştir demektir. replace("i","+",2) gibi yazarak kaç tanesini değiştirmesini istiyoruzu da belirtebiliriz
print(changed_sentence)  

print(sentence)  # note that, again source text is unchanged

txt = 'I was there'
x = txt.replace('was', 'were'), txt.upper(), txt.lower() # Bu şekilde tek bir satırda assignment olayı da mevcuttur
print(x) 
print(x[0], x[1], x[2], sep="\n")

x = "test", "ert", "rtdd"
print(x)
print(x[0], x[1], x[2], sep="\n")

sentence = "I live and work in Virginia"
swap_case = sentence.swapcase()
print(swap_case)
print(swap_case.capitalize())  # changes 'i' to uppercase and the rest to lowercase
                               # Görüleceği üzere işlem görüp değiştirilmiş olan sentence üzerinden capitalize() yapar

test = "Test Cümlesi"
print(test.swapcase()) # Bu iki kullanım aynıdır
print(str.swapcase(test))

print("Actions speaks louder than words".upper().swapcase().capitalize())

# Burada upper() ile bütün harfler önce büyük oldu, tüm cümle
# Takiben swapcase() ile hepsi küçük oldu
# En son olarak capitalize() ile de ilk harfi büyük oldu, yine aynı cümler çıktı olarak verildi

"""string.upper() # returns string type,

string.upper().lower() # also returns string type,

string.upper().lower().title() # returns string type again.

str.strip() : removes all spaces (or specified characters) from both sides.

str.rstrip() : removes spaces (or specified characters) from the right side.

str.lstrip() : removes spaces (or specified characters) from the left side.
"""

space_string = "     listen first      "
print(space_string.strip())  # removes all spaces from both sides, strip() methodu içerisine herhangi bir karakter de alabilir

source_string = "interoperability"
print(source_string.strip("iyr"))   # The methods described removes the trailing characters (i.e. characters from the right side).
# removes trailing "y" or "i" or "yi" or "iy" from both sides
# Burada baştan "i" den başladı sonra karşısına "n" çıktı ve o strip edilmek isteneen kararkterler arasında olmadığından işlemi durdurdu
# Aynı şekilde sondan başladığında"y" den başladı sonra karşısına hemen "t" çıktı ve o strip edilmek istenen karakterler içerisinde olmadığı için işlemi durdurdu

text = "interoperability"
print(text.strip("yin")) #Karakterleri tek tek eliyor. Birer birer bakıyor, blok olarak değil !
print(text.strip("ytil"))

ornek = "interoperability"
print (ornek.strip ("iny").strip("t")) # Bu şekilde arka arkaya da kullanılabilir. strip edilmiş stringi tekrar strip eder

source_string = "interoperability"
print(source_string.strip("i","y")) # Bu şekilde ayrı ayrı parantez içerisinde yazılmaz.Üstteki gibi olmalı

source_string = "interoperability"
print(source_string.lstrip("in"))  # Sadece sol taraftan ilgili harfleri arar ve takibinde strip edip işlemi durdurur
# removes "i" or "n" or "in" or "ni" from the left side

space_string = "     listen first      "
print(space_string.rstrip())  # removes spaces from the right side (Sadece sağ taraftan ilgili harflere bakar ve keser). Burada boşluklar gitti

source_string = "interoperability"
print(source_string.rstrip("yt"))  
# removes "y" or "t" or "yt" or "ty" from the right side

ornek = "byinibinbininteroperabilitybnibyibnibibnibyn"
print(ornek.strip("yibn")) # Burada görüleceği üzere "t" ye kadar (hem soldan hem sağdan) strip edilmek istenen karakterler olduğundan onları kesti ve takiben işlemi durdurdu 
print(ornek.rstrip("yibn")) # Burada da aynı şekilde sadece sağdan başladı
print(ornek.lstrip("yibn")) # Burada da yine aynı şekilde

sent = "tyou can learn everything in pre-classz"
print(sent.strip("tz").upper())

text = "In God wee trust" # Yazımı düzeltelim
print(text.replace("ee", "e", 1))
print(text.replace("e", "", 1)) # Burada ilk e yi boş karakterle (boşluk değil) replace etti
print(text.title().replace("ee","e")) # Burada aslında tüm "ee" leri "e" ile değiştiriyor lakin zaten bir tane olduğu için sıkıntı yok
print(text.replace("wee",  "We"))
print((text[:9] + text[10:]).title()) # Burada da index[0] dan başlayıp index[9] a kadar olan yeri (9 dahil değil o da "e") ve index[10] dan başalyıp sonuna kadar olan yeri alıp birleştirince düzeltmiş oluyor

sentence = "The dog is named Sammy"
print(sentence.count('a'))  # Cümle içerisinde bir karakter/(ler) kaç defa geçer onu çıkartır

first_name = input("What is your first name?")
last_name = input("What is your last name?")

print("Hello " + first_name.capitalize() + ' ' + last_name.upper())

print('www', 'clarusway', "com", sep='.', end=' ') # Hatırlayalım burada sep elemanlar arasına, end is print() işleminden sonrasına işlem yapıyordu
print('will', end=' ')
print('open', end=' ')
print('your', end=' ')
print('path', end='.')

var1 = "sleep"
var2 = "eat"
var3 = "better"
var4 = "life"

output = f"The less you {var1} and {var2}, the {var3} your {var4} will be."

print(output)

city = "SARAJEVO"

output = f"I live in {city.capitalize()}"
print(output)

"""# **LISTS**"""

# In Python, a list is only an ordered collection of valid Python values.
word = "happy"
liste = list(word) # list() foknsiyonu ile kolaylıkla bir string,tuple etc. listeye çevirebiliriz

print(word)
print(liste)

# A list can be created by enclosing values, separated by commas, in square brackets 👉🏻[].

country = ['USA', 'Brasil', 'UK', 'Germany', 'Turkey', 'New Zealand']
print(country) # All the country names are printed in the same order as they were stored in the list because lists are ordered.

# Another way to create a list is to call the 'list()' function.

string_1 = 'I quit smoking'

new_list_1 = list(string_1)  # we created multi element list,elemanlarına teker teker ayrılabilen yapıları alır, interger değerler almaz 
print(new_list_1)
print(len(new_list_1))

new_list_2 = [string_1]  # this is a single element list, Bu şekildeki bir kullanımda sadece bir eleman olarak düşünür
print(new_list_2)
print(len(new_list_2))

list_1 = ['h', 'a', 'p', 'p', 'y']

word = "happy"
list_2 = list(word)

print(list_1)
print(list_2) # Lists can contain more than one of the same value

mixed_list = [11, 'Joseph', False, 3.14, None, [1, 2, 3]] # Liste elemanları bu şekilde mix type olabilir
print(mixed_list)                                         # As you see, one or more of the list elements can even be a list.

warning = 'You must quit smoking!'
print(len(list(warning))) # Görüleceği üzere list() fonksiyonu ile yapılan listelerde string ifadenin tüm karakterleri ayrı ayrı yazılır ve liste elemanları olur
print(len([warning])) # Burada öyle birşey yok

# We can add an element into a list using .append() or .insert() methods.

# .append() : Append an object to end of a list. Using only list.append(element) syntax, returns none. 
# If you want to see the new appended list, you have to call or print it.

empty_list_1= [] # İkisi de boş liste oluşturur
empty_list_2 = list()

empty_list_1 = []
empty_list_1.append('114')
empty_list_1.append('plastic-free sea') # append() fonksiyonu daima listenin sonuna eleman ekler

print(empty_list_1)

city = ['New York', 'London', 'Istanbul', 'Seoul', 'Sydney']
city.append('Addis Ababa') # append() fonksiyonu ile eleman eklenebillir fakat otomatik olarak son index e atar, değiştirilemez
                          
print(city)

numbers = []
numbers.append(1)
numbers.append(2)
numbers.append(3)
numbers.append(4)
print(numbers)

numbers = [1, 4, 7]
numbers.append(9)
numbers.append('9')

print(numbers)

# .insert() : Add a new object to list at a speciﬁc index. The syntax looks like list.insert(index, object). 

city = ['New York', 'London', 'Istanbul', 'Seoul', 'Sydney', 'Addis Ababa']
city.insert(2, 'Stockholm') # insert() fonksiyonu ile de elaman eklenebilir ve insert(2, "eleman") şeklinde atanacak index i de belirleyebiliriz

print(city)

numbers = [1, 4, 7]
numbers.insert(2, 9) # 2.indexe 9 ekle demektir
print(numbers)
numbers.insert(1, 6) # 1.indexe 6 ekle demektir
print(numbers)

# We can remove the elements in lists using list.remove() method : list.remove(element)

city = ['New York', 'London', 'Stockholm', 'Istanbul', 'Seoul', 'Sydney', 'Addis Ababa']
city.remove('London') # remove() fonksiyonu ile eleman silme işlemini gerçekleştiriyoruz
print(city)

# Aynı şekilde pop() methodu ile de bir listeden index belirterek eleman silebiliyoruz: list.pop(index)

languages = ['Python', 'Java', 'C++', 'French', 'C']

return_value = languages.pop(3)
print('Return Value:', return_value)
print('Updated List:', languages)

# Yine del fonksiyonu da listelerden belirli aralıktaki elemanları silmek için kullanılabilir

lis = [2, 1, 3, 5, 4, 3, 8]
  
# using del to delete elements from pos. 2 to 5, deletes 3,5,4
del lis[2 : 5]
print(lis)

# We can sort the elements using list.sort() method.

city = ['New York', 'Stockholm', 'Istanbul', 'Seoul', 'Sydney', 'Addis Ababa']
city.sort()  # sort() fonksiyonu ile elemanları alfabetik sıraya göre sıralandırabiliriz veya artacak şekilde
print(city)  # sort() fonksiyon parametreleri key ve reverse dür. key ile istenen fonksiyona göre sıralama yapılabilir
             # reverse default değeri ise False dur, biz bunu True yaparak istersek listeyi tersten yazdırabilriz

city = ['Addis Ababa', 'Istanbul', 'New York', 'Seoul', 'Stockholm', 'Sydney']
print(len(city)) # len() fonksiyonu ile listenin eleman sayısını yani uzunluğunu yazdırabiliriz.

# max() function returns the largest item in an iterable. It can also be used to find the largest item between two or more parameters. max(iterable, *iterables, key, default)

number = [3, 2, 8, 5, 10, 6]
largest_number = max(number);                                   # Bir iterable içerisindeki en büyük elemanı bulur. 
print("The largest number is:", largest_number)

languages = ["Python", "C Programming", "Java", "JavaScript"]
largest_string = max(languages);                                # Stringlerde de alfabetik sıralamaya göre en sondakini çıkartır

print("The largest string is:", largest_string)

square = {2: 4, -3: 9, -1: 1, -2: 4}

key1 = max(square) # the largest key, yani burada key ler rakamlardan oluştuğu için en büyük rakamı verir
print("The largest key:", key1) 

key2 = max(square, key = lambda k: square[k]) # the key whose value is the largest, Bu kullanımda da değeri en yüksek olan key i verir, yani 9 un keyi -3
print("The key with the largest value:", key2)  
print("The largest value:", square[key2])

# min() function returns the smallest item in an iterable. It can also be used to find the smallest item between two or more parameters.min(iterable, *iterables, key, default)

number = [3, 2, 8, 5, 10, 6]
smallest_number = min(number);

print("The smallest number is:", smallest_number)

languages = ["Python", "C Programming", "Java", "JavaScript"]
smallest_string = min(languages);                        # If the items in an iterable are strings, the smallest item (ordered alphabetically) is returned.

print("The smallest string is:", smallest_string)

square = {2: 4, 3: 9, -1: 1, -2: 4}

# the smallest key
key1 = min(square)
print("The smallest key:", key1)    # -2

# the key whose value is the smallest
key2 = min(square, key = lambda k: square[k])

print("The key with the smallest value:", key2)    # -1

# getting the smallest value
print("The smallest value:", square[key2])

my_list = [1, 3, 5, 7]
print(my_list * 3)

city = ['New York', 'Stockholm', 'Istanbul', 'Seoul', 'Sydney', 'Addis Ababa']
city[1] = 'Melbourne'  # Index[1] e atama işlemi, görüleceği üzere önceki elemanı override eder
print(city)

numbers = [1, 4, 7]
print(numbers.index(4)) # index() fonksiyonu ile elamanın listenin kaçıncı indexinde olduğunu gösterir: list.index(element, start, end)

vowels = ['a', 'e', 'i', 'o', 'i', 'u']

index = vowels.index('e')
print('The index of e:', index)

index = vowels.index('i')
print('The index of i:', index)

alphabets = ['a', 'e', 'e', 'i', 'o', 'g', 'l', 'i', 'u']

index = alphabets.index('e')    # İlk bulduğu ilgili karakterin index numarasını verir
print('The index of e:', index)

index = alphabets.index('i', 4)   # index[4]ten sonrasını ara demektir
print('The index of i:', index)

alphabets = ['a', 'e', 'i', 'o', 'g', 'l', 'i', 'u']

index = alphabets.index('i', 3, 5)    # Burada da index[3] ile index[5] arasında ara demektir. O da olmadığı için error ('i' is not in list) verir
print('The index of i:', index)

"""# **ACCESSING LISTS**"""

colors = ['red', 'purple', 'blue', 'yellow', 'green']
print(colors[2]) # colors listesinin 2.indexinin ne olduğunu çıkartır
print(colors[-1]) # colors listesinin sondan 1. indeksinin ne olduğunu çıkartır

new = ["h", "a" , 1, ['p', 5], True]

print(new[4])
print(type(new[4]))

variable = new[3]
print(type(variable))

city = ['New York', 'London', 'Istanbul', 'Seoul', 'Sydney']

city_list = []
city_list.append(city) # Burada city_list içine city listesini ekleiyoruz

print(city_list) # Bu city_list listesinin sadece 1 elemanı vardır ki o da bir listedir
print(city_list[0]) # Liste içerisindeki listeyi döndürür çünkü city_list listesinin tek bir elemanı vardır o da city listesidir

listem = ['elma', 'armut']
listem.append(['portakal', 'muz']) # append() fonksiyonunun işlevi, burada görüleceği üzere direk liste olarak ekler
print(listem)

listem = ['elma', 'armut']
listem.extend(['portakal', 'muz']) # extend() fonksiyonunun işlevi, burada görüleceği üzere liste elamanlarını yeni elemanlar ile uzatmıştır
print(listem)

city_list = [['New York', 'London', 'Istanbul', 'Seoul', 'Sydney']]
print(city_list[0]) # city_list listesinin sadece 1 elemanı var o da zaten bir liste

city_list = [['New York', 'London', 'Istanbul', 'Seoul', 'Sydney']]
print(city_list[1]) # Görüleceği üzere burada listemiz tek elemanı olduğu için ( o da bir liste), index[1] yok ve hata verir

city = [['New York', 'London', 'Istanbul', 'Seoul', 'Sydney']]

print(city)
print(city[0]) #city listesinin 0. indexteki elemanı listenin aynısı çünkü city listesinin tek elamanı var o da liste
print(city[0][2]) # city listesinin 0. index elemanının 2. indexindeki elemanı çıkartır
print(city[0][2][3]) # city listesinin 0.indexinin 2.index elemanının 3.indexini çıkartır
print()
print(f"Element 0 of {city} is: ", city[0])
print(f"Element 0 0f {city[0]} is: ", city[0][0])   # f-string olayını bu şekilde kullanabiliriz
print(f"Element 0 of {city[0][0]} is: ", city[0][0][0])

fruits = ['apple', 'banana', 'watermelon', 'orange', 'mango', 'avocado']

fruit_list = []
fruit_list.insert(0, fruits) # Bir nevi liste içierisinde liste oluşturur, index[0] a fruits listesini ata demektir
print(fruit_list)
print(fruit_list[0][2][7])

print(len([[12, 34, 56]]))

print(len([[12, 34, 56]][0])) # Listenin 0. indexinin uzunluğu nedir anlamına gelir o da zaten listenin kendisidir

print(len([[12, 34, 56], [0]])) # Burada ise görüleceği üzere liste içerisinde 2 adet liste olarak eleman var (virgülle ayrılmış) ve dıştaki listenin uzunluğu bu yüzden 2 olur

"""**LIST SLICING**"""

# Slicing is just similar to indexing. The difference is adding colon or colons in square brackets.
# You can keep in mind the formula syntax below for slicing a sequence. From 'start' to 'stop-1', by 'step'.
# The formula syntax is : sequence[start:stop:step]

numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17]
print(numbers[2:5])  # we get the elements from index=2 to index=5(5 is not included)

number = [1,2,3,4,5,6,7,8]
print(number[1:5])
print(number[1:5][1:3])           # Bu şekilde slicing yapılmış bir listeye tekrar slicing uygulayabiliriz
print(number[1:5][1:3][::])       # Buradaki [::] sembolü listeyi aynen yazdırır, olmasa da olurdu
print(number[1:5][1:3][::][:1])   # Listenin en son halinin [3, 4] 0 dan başayıp index[1] e kadar olan elamanlarını yazdırır. 1 dahil değil o da sadece ilk eleman olur yani index[0]

sayı = [1,2,"three",4,5,6,7,8]
print(sayı[1:5])
print(sayı[1:5][1:3])
print(sayı[1:5][1:3][0])
print(sayı[1:5][1:3][0][2])

city = ['New York', 'London', 'Istanbul', 'Sydney']
city[1:] = 'Seoul' # 1.indexten başlayarak en son elemana kadar 'Seoul' un elamanlarını atar onlar da iterable(string)(elemanlarına ayrılabilir) olduğu için ayrı ayrı ekler
print(city)

city = ["İstanbul", "İzmir", "Ankara", "Samsun"]
city[0:2] = ["a", "b"] # Listenin 0 ve 1.indexine a ve b atar sonradakilere dokunmaz
print(city)

city[0:2] = "a" # Listenin 0 ve 1.indexine a atar sonradakilere dokunmaz. Aynısı olduğu için bir kere yazar
print(city)

city[0:2] = "abc" # Listenin 0.indexinden başlayarak a ve b ve c yi atar sonradakilere dokunmaz. Aynısı olduğu için bir kere yazar
print(city)

liste = list(range(11)) # range() fonksiyonu iterable bir sayı dizin oluşturur. Stop-1 e kadar olur
                          # The formula syntax is : range(start, stop[, step])
print(liste)
print(liste[0:11:2]) 
print(liste[1:11:2])

mix_list = [1, [1, "one", 2, "two", 3, "three"]]
print(mix_list[1][1::2]) # Listenin index[1] deki elemanının ki o da liste, index[1] den başlayarak sonuna kadar 2 şer atlayarak yazdır demektir
print(mix_list[1][1:6:2]) # Bu şekilde de yazılabilir

animals = ['elephant', 'bear', 'fox', 'wolf', 'rabbit', 'deer', 'giraffe']

print(animals[:])  # all elements of the list, Bu kullanımla listenin tüm elemanlarını yazdırabiliyoruz
print(animals[3:])
print(animals[:5])
print(animals[::2])