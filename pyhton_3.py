# -*- coding: utf-8 -*-
"""Pyhton-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mnjY-P_U1AioU4_kczPHGB4XlnTkMUc2

### **Operations with print() function**
"""

number = 2020
text = "children deserve respect as much as adults in"
print(text, number)

print("yesterday I ate", 2, "apples")  
# When using print() we can write more than one expression in parentheses separated by ,

print('i', end=' ')  # Görüleceği üzere end ile 4 satırı yanyana yazabilidik. end olmasaydı alt alta olurlardı
print('will say', end=' ')
print("'i missed you'", end=' ')
print('to my mother')

print('ahmet', end='-')  # end() fonksiyonu print işlemini yazdıktan sonraki olayı belirlemek için kullanılır !!!, sep() fonksiyonundan farklıdır
print('mehmet', end=' ')
print("sevilay")

print('smoking', 'is', 'slowly', 'killing me', sep=' + ')  #sep ile aralarında + işareti koyabiliriz, sep() fonksiyonu içerideki stringleri ayırmak için kullanılır

print('smoking', 'is', 'slowly', 'killing me', sep='\n') #sep ile araya bir satır boşluk da (sep= '\n') koyabilirsin

print('clarusway', end = '\n\n')
print("İstanbul")

x = 5
print ('value of x       : ', x)

x += 2  # x değerine 2 ekle demektir (Variable += number gives the same result as Variable = Variable + number.)
print ("2 more of x      : ", x, "\n") # using string expression '\n', 
                                       # we produce extra line. 
                                       # So that we had empty line

y = 10
print ('value of y       : ', y)

y -= 2                                    # y değerinden 2 çıkar demektir
print ("2 minus y        : ", y, "\n")

z = 6
print ('value of z       : ', z)

z *= 2                                    # z değerini 2 ile çarp demektir
print ("2 times z        : ", z, "\n")

"""**-= decrements the variable in place,**

**+= increment the variable in place,**

*= multiply the variable in place,

**/= divide the variable in place,**

**//= ﬂoor divide the variable in place,**

**%= returns the modulus of the variable in place,**

**= raise to power in place. **kalın metin**
"""

a = 100 + 45
b = 500 - 65
c = 25 * 4 
d = 10 / 2
e = 11 // 2
f  = 5 ** 3
h = 10 % 3

print(a, b, c, d, e, f, h)

print(11-7)
print('11-7')
print(4 + 11.0)
print('4' + 4) # error verir

x = 15
x /= 2
print(x)

x = 15
x //= 2 # Bölümün tam kısmını alır
print(x)

x = 15
x %= 6  # Kalanı alır
print(x)

x = 15
x **= 2  # Karesini alır (üssünü)
print(x)

fruit = 'Orange'
vegetable = "Tomato"
print (fruit, """ and """ , vegetable)

"""### **Escape Sequences**

Here are basic escape sequences in Python:

\n : means new line,

\t : means tab mark,

\b : means backspace. It moves the cursor one character to the left.
"""

print(""")

print("\"") # \ bu işaret özellik kazandırır veya özelliğini değiştirir

print("\")

print("\\") # \ kullanmasaydık yukarıdaki gibi hata verirdi

print('C:\\north pole\noise_penguins.txt') # Eğer \north öncesi bir \ daha koymasaydık orth diye alta geçerdi
print('__________')
print('first', 'second', 'third', sep = '\t')

print('C:\\november\number_expenditure.txt') # Görüldüğü gibi ilk n yazdırılır fakat ikinci n yazdırılmaz, onu alt satıra geç komutu gibi algılar

print('we are', '\boosting', 'our', '\brotherhood')

print('we', '\bare', '\bunited') # Görüleceği üzere \b ifadesi ile kelimeler arası boşluklar silindi

print('it\'s essential to learn Pyhton\'s libraries in IT World') # Böyle kullanarak ' işaretlerini yazdırabiliyoruz
print('it\'s funny to learn Python')

text1 = 'it'
text2 = 'easy'
print(text1 + '\'s very '+ text2) # Görüleceği üzere \ kendisinden sonra gelen ve normalde sorun çıkartacak ' işaretinin önemsenmemesini sağlıyor

text = "Clarusway, Clarusway, Clarusway"

print(text,'\n')
print('\t', text,'\n')
print('\t\t', text)

text = "Clarusway, Clarusway, Clarusway"

print(text + ',' , '\n\t', text + ',', '\n\t\t', text)

text = "Clarusway, Clarusway, Clarusway,\n\tClarusway, Clarusway, Clarusway,\n\t\tClarusway, Clarusway, Clarusway"
print(text,sep=",")

text = "Clarusway, Clarusway, Clarusway,\n\tClarusway, Clarusway, Clarusway,\n\t\tClarusway, Clarusway, Clarusway"

print(text)

text = "Clarusway, Clarusway, Clarusway"

print(text, '\n\t', text, '\n\t\t', text)

print('C:\november\number_expenditure.txt')

"""## **Boolean Operations**

### It is important to remember that, logical operators have a different priority and it has an effect on the order of evaluation. Here are the operators in order of their priorities:

### not
### and
### or
"""

# For example : x = True and not True, the value of x returns False.
# It evaluates not True first and gives False. It becomes x = True and False and gives False.

logic = True and False or not False or False
print(logic)

"""# The following values are considered False, in that they evaluate to False when applied to a boolean operator:

***- None.***

***- Zero of any numeric type: 0, 0.0, 0j***

**- Empty sequences and collections: '', [], {}.** 

***- Other than above values, any remaining value is evaluated as True ***
"""

False and not True

True and False or not False or False

print(2 and 3) # Burada 2 True verir and gördü ya Pyhton 2.sine de bakmak zorunda, baktı o da True ve kararı burda verdi, işte karar verdiği yerdekini çıktı olarak veriyor

print(1 and 0) # Burada 1 True veriyor and gördü ya ikincisine bakarak karar vermeli bir baktı o False verdi, ozaman True and False sonuç olarak False verir yani ikinci değer olan 0 çıktısını verir

print(1 and "I am doing good!") # Burada 1 True and gördü ikincisine baktı o da True geldi ve kararı burda verdi dolayısıyla ikinci True yu çıktı veir o da I am doing good!

print(2 or 3) # Burada 2 True gelir baktı ki sonra or geldi yani sonrasında ne geleceği önemli değil True da olsa False da olsa sonuç True olacak yani ilkinde karar

print(3 and 2 and 1) # 3 True verir and geldi ikincisine bakmalı o da True verir dolayısıyla burda karar verdi çıktı 2 olur sonra and geldi ikinciye bakar o da 1 ve True gelir burada karar verdi ve sonuç True olur o da çıktı olarak 1 verir

print(3 or 2 or 1) # Burada 3 True verir sonrasında baktı or geldi ondan sonrası çok da önemli değil ne olursa olsun sonuç True olacağı için ilkinde karar verir 3 çıkar, aynı durum ikincisi için de var

print(2 and "Hello World") # 2 True verir and geldi ikinciye bakmalı baktı o da True geldi ve burada karar verdiği için ikincisini çıktı olarak verir Hello World
print([] and "be happy") # [] False verir baktı and geldi sonrasına bakmasına gerek yok çünkü sonuç False olacak dolayısıyla ilk False değeri olan [] çıktı olarak verirlir
print(None and ()) # None False verir baktı and geldi ikinciye bakmasına gerek yok üstteki ile aynı durum ve sonuç False olacağı için ilk False değerinde karar verdiğinden çıktısı None olur

bool("0") # Burada normalde 0 False olur lakin " " içinde yazıldığı için string gibi olur ve True verir

bool(0) # Burada işte 0 False verir

bool(0.0) # Burada da 0.0 False verir yukarıdaki kurallarımıza uygun olarak

bool(0.0j) # Burada 0.0j kurallar gereği False olduğunu hatırlayalım

bool(" ") # Burada " " içerisindeki boşluk da bir karakter olduğu için 1 verir yani True

bool("") # Tanımlarda olduğu gibi "" da False verir

print(2 or "Hello World") # 2 True verir or geldi sonrası çok önemli değil sonuç her halükarda True olacak yani ilkinde karar verdi ve değeri 2 çıktı olarak verilir
print([] or "be happy!") # [] False gelir or geldi ikincisinie bakmak zorunda "be happy" de True gelir yani False or True dan sonuç True olur ve onun değeri olan be happy çıktı olarak verilir
print(None or ()) # None False verir or geldi ikincisine baktık () da false verir False or False sonuç False olur lakin ikinci de karar veerdiği için çıktı () olur
print({} or 0) # {} False verir or geldi ikinciye baktık o da False verdi False or False sonuç False olur karar ikincide verildi çıktı o olur yani 0
print({0} or False) # {0} True verir or geldi ne gelirse gelsin sonuç True olacağı için ve ilkinde karar verildiği için onun değeri olan {0} çıktı olarak verilir

print(None or 1) # None False verir baktı or geldi o zaman ikincisine bakarak karar vermeli ona baktı 1 True yani sonuç True ve değeri 1 olarak çıktı verir

2 or 3 # 2 True verir or geldi sonrası önemli değil sonuç True olur yani ilk değerde karar verdi çıktı 2 olur

none = "False"
print(none or 1) # none değişkeni değeri "False" yani True baktık or geldi sonrası önemli değil ilk değer olan False string çıktısını verir

print([] and "Hello World!") # [] False verir ve and geldi yani sonrası çok nemli değil True da gelse False da gelse sonuç False olacak yani ilkinde karar verdi sonuç False çıktısı [] olacak

print(0 or {}) # 0 False verir ve or geldi dolayısılya ikincisine bakmadan karar veremez baktı {} da False verir yani False or False dan sonuç False olur ama ikincide karar verdiği için çıktı {} olur

print([] or "Hello World!") # [] False verir ve or geldi ikincisine bakmalı o da True geldi yani False or True oldu sonuç True olur ve değeri Hello World olur

"and" and not () # Burada "and" True verir ve and geldi ikincisine bakmalı baktı o da not False dan True geldi yani True and True dan True olur ikincisi çıktı olur yani True

a = " "
b = "False"
c = True
d = ""
print(a or b or c and not d) # True or True or True and not False (a nın değerini çıktı olarak verir)

print("None or True and 1")

True or False and "False" and not "False" and 0 # Öncelik sırlandırmasına dikkat ! (NAO)
                                                # True or False and "False" and False and 0 (Burada not "False" yani not True dan False geldi)
                                                # True or (False) (İlk False dan sonrası hep and olduğu için bir nevi hepsini yuttu ve False çıktı)
                                                # En son olarak da True or False dan sonuç True olarak çıktı

not ("None" or None) and False or ("and" and not ()) # ("None" or None) parantez içi True or None oldu sonucu da True olur ve True değeri olan string "None" olarak verilir
                                                     # ("and" and not ()) parantez içi True and not False dan True olur ve ilk True dan sonra and geldi ikincide karar verdi çıktı not () olur bir nevi True
                                                     # Son hali : not "None" and False or True oldu
                                                     # İşlem önceliklerine göre düzenlersek önce not "None", Yani not True dan False geldi
                                                     # Sonra False and False or True oldu, burada and önceliğinden
                                                     # Son hali: False or True oldu buradan da sonuç True olarak çıktı verilir

"""# **INDEXING STRINGS**"""

print("ALİ"[1]) # Bu şekilde iken liste gibi düşünür

print("clarus-way "[10]) # 10. karakter olan boşluğu çıktı olarak verir

var = "ahmet 34"
print(var[6])

var = "clarus-way "
print(var[1:4]) # 1 dahil 4 değil
print(var[6:8]) # 6 dahil 8 değil

"""The formula syntax of string indexing is : string[start:stop:step].

string[:] : returns the full copy of the sequence

string[start:] : returns elements from start to the end element

string[:stop] : returns element from the 1st element to stop-1

string[::step] : returns each element with a given step
"""

# [START:STOP:STEP]

fruit = 'Orange'  # Sıralandırma her zaman olduğu gibi '0' dan başlar

print('Word                   : ' , fruit)
print('First letter           : ' , fruit[0])
print('Second letter          : ' , fruit[1])
print("3rd to 5th letters     : " , fruit[2:5]) # 2 den başla 5 e kadar 2 dahil 5 değil 
print("Letter all after 3rd   : " , fruit[2:])  # 2 den başlar sonrasını alır
print("Letter all before 3rd   : " , fruit[:2]) # 2 den öncesini alır, 2 dahil değil
print(fruit[:-2])  # Tersten ikincisinden öncesini alır lakin burda -2 indexindeki karakteri almaz [0:-2] gibi düşün, malum tersten başayınca -1 den başlayarak sayıyoruz
print(fruit[-3:])  # Tersten üçüncüsünden sonrasını alır, bu örnek için [3:] ile aynı sonucu verir

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]
print(friends)
print(friends[0]) # index lerde baştan başlarken (pozitif) 0 dan başlar
print(friends[4]) # Bu örneğe göre index [-1] ile aynı sonucu verir
print(friends[-1]) # index lerde sondan başlarken (negatif) -1 den başlar
print(friends[-5]) # Bu örneğe göre index [0] ile aynı sonucu verir

print()

print(friends[1:]) # index [1] dahil ve sonrasını yazdırır, yine liste halinde çıktı alır dikkat et
print(friends[1:3]) # index [1] dahil fakat index [3] dahil değil, arasını yazar, [1] ve [2]

print()

print(friends[1]) # Görüleceği üzere bu iki örnek arasındaki tek fark parantezler [''] olur
print(friends[1:2]) # Yani anlaşılan o ki slicing yapıldığında tek bir çıktı bile verse onu da liste halinde gösterir.

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]
friends[1] = "Harun"  # Bu şekilde listedeki herhangi bir değeri index numarası ile değiştirebiliriz

print(friends[1]) # Mesela burada index 1 Harun oldu
print(friends[2]) # Ama index 2 de herahngi bir değişiklik yok sadece 1 değişti

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]
friends.append("Yavuz") # Bu şekilde append() fonksiyonu ile listeye başka bir eleman ekleyebiliriz. 
                        # Otomatik olarak listenin her zaman sonuna ekler. (Returns None)
print(friends)

# The method takes a single argument

# item - an item to be added at the end of the list
# The item can be numbers, strings, dictionaries, another list, and so on.

animals = ['cat', 'dog', 'rabbit']
animals.append('guinea pig')

print('Updated animals list: ', animals)

animals = ['cat', 'dog', 'rabbit']
wild_animals = ['tiger', 'fox']
animals.append(wild_animals)

print('Updated animals list: ', animals)

# The insert() method takes two parameters: (Returns None)

# index - the index where the element needs to be inserted
# element - this is the element to be inserted in the list

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]
friends.insert(2, "Tarık") # Bu şekilde insert() fonksiyonu ile başka bir elemanı istediğimiz index e atayabiliyoruz
                           # Görüleceği üzere listeye eklendi ve bizim belirlediğimiz indexe eklendi
print(friends)

vowel = ['a', 'e', 'i', 'u']
vowel.insert(3, 'o')

print('Updated List:', vowel)

mixed_list = [{1, 2}, [5, 6, 7]]
number_tuple = (3, 4)
mixed_list.insert(1, number_tuple)

print('Updated List:', mixed_list)

# The remove() method takes a single element as an argument and removes it from the list. (Returns None)
# If the element doesn't exist, it throws ValueError: list.remove(x): x not in list exception.

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]
friends.remove("Hasan")  # Bu şekilde remove() fonksiyonu ile istediğimiz bir elemanı listeden çıkartabiliriz

print(friends)

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]
friends.remove("Yavuz") # Görüleceği üzere Yavuz ismi listemizin içerisinde olmadığı için, yukarıda bahsettiğimiz hatayı verir
print(friends)

animals = ['cat', 'dog', 'rabbit', 'guinea pig']
animals.remove('rabbit')

print('Updated animals list: ', animals)

# The clear() method doesn't take any parameters.
# The clear() method only empties the given list. It doesn't return any value.

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]
friends.clear()  # Bu şekilde clear() fonksiyonu ile tüm listeyi silebiliriz

print(friends)

list = [{1, 2}, ('a'), ['1.1', '2.2']]
list.clear()

print('List:', list)
print()

list = [{1, 2}, ('a'), ['1.1', '2.2']]
# del list[:]  Bu şekilde bir kullanımla da tüm listeyi silmemiz mümkündür. 
del list[1:3] # İstediğimiz aralığı da silebiliriz !!!

print('List:', list)

# The pop() method removes the item at the given index from the list (Returns the removed item)

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]
friends.pop(2)  # Bu şekilde pop() fonksiyonu listede istediğimiz indexteki elemanı silebiliriz. (Hasan)
friends.pop(3)  # Burada daha önce yukarıda işlem görmüş listeye göre index[3] teki eleman silinmiştir. (Ali)
friends.pop()   # Eğer içi boş bırakılırsa da otomatik olarak listenin son elemanını siler
print(friends)

# If the index passed to the method is not in range, it throws IndexError: pop index out of range exception.

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]
friends.pop(6)   # Eğer girilen index karşılığı listede yoksa bu şekilde bir hata verir
print(friends)

# programming languages list
languages = ['Python', 'Java', 'C++', 'French', 'C']

# remove and return the 4th item
return_value = languages.pop(3)
print('Return Value:', return_value)

# Updated List
print('Updated List:', languages)

# programming languages list
languages = ['Python', 'Java', 'C++', 'Ruby', 'C']

# remove and return the last item
print('When index is not passed:') 
print('Return Value:', languages.pop())
print('Updated List:', languages)

# remove and return the last item
print('\nWhen -1 is passed:') 
print('Return Value:', languages.pop(-1))
print('Updated List:', languages)

# remove and return the third last item
print('\nWhen -3 is passed:') 
print('Return Value:', languages.pop(-3))
print('Updated List:', languages)

# Çıktıda da görüleceği üzere her bir sonraki komut işlem görmüş listeye göre yapılır

# The index() method returns the index of the specified element in the list. 
# The syntax of the list index() method is: list.index(element, start, end)
# Note: The index() method only returns the first occurrence of the matching element.

# The list index() method can take a maximum of three arguments:

# element - the element to be searched
# start (optional) - start searching from this index
# end (optional) - search the element up to this index

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]

print(friends.index("Hasan")) # Bu şekilde index() fonksiyonu ile listedeki istenen elemanın index numarası çıktı olarak alınabilir

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]

print(friends.index("Yavuz")) # Eğer listede olmayan bir eleman olursa bu şekilde ('Yavuz' is not in list) hatası verir

vowels = ['a', 'e', 'i', 'o', 'i', 'u']

index1 = vowels.index('e')
index2 = vowels.index('i')

print('The index of e:', index1)
print('The index of i:', index2)

alphabets = ['a', 'e', 'i', 'o', 'g', 'l', 'i', 'u']

index = alphabets.index('e') # Standart kullanım
print('The index of e:', index)  

# 'i' after the 4th index is searched
index = alphabets.index('i', 4)   # Bu kullanım 4 ten sonrasına bak demektir. index[6] da bulacaktır
print('The index of i:', index)

# 'i' between 3rd and 5th index is searched
index = alphabets.index('i', 3, 5)   # Error! Burada da index[3] ile index[5] arasında i olmadığı için hata verecektir
print('The index of i:', index)

# The count() method returns the number of times the specified element appears in the list.
# The count() method takes a single argument: element - the element to be counted
# The count() method returns the number of times element appears in the list.

friends = ["Ahmet", "Mehmet", "Hasan", "Hasan", "Hüseyin", "Ali" , "Hasan"]

print(friends.count("Hasan")) # Bu şekilde count() fonksiyonu ile istenen elamanın listede kaç tane olduğunun sayısını çıktı olarak alabiliriz

vowels = ['a', 'e', 'i', 'o', 'i', 'u']

count = vowels.count('i')
print('The count of i is:', count)

count = vowels.count('p')
print('The count of p is:', count)

random = ['a', ('a', 'b'), ('a', 'b'), [3, 4]]

count1 = random.count(('a', 'b'))
print("The count of ('a', 'b') is:", count1)

count2 = random.count([3, 4])
print("The count of [3, 4] is:", count2)

count3 = random.count('b')
print(count3)

print(random.count('a')) # Bu şekilde de yazılabilir

# The sort() method sorts the elements of a given list in a specific ascending or descending order.
# The syntax of the sort() method is: list.sort(key=..., reverse=...)

# Note: The simplest difference between sort() and sorted() is: sort() changes the list directly and doesn't return any value, while sorted() doesn't change the list and returns the sorted list.

# By default, sort() doesn't require any extra parameters. However, it has two optional parameters:

# reverse - If True, the sorted list is reversed (or sorted in Descending order)
# key - function that serves as a key for the sort comparison

friends = ['Ahmet', 'Mehmet', 'Hasan', 'Hüseyin', 'Ali', 'Yavuz']
friends.sort()  # Bu şekilde sort() fonksiyonu ile alfabetik sıraya göre listeyi sıralandırabiliriz

lucky_numbers = [4,7,17,8,90,240]
lucky_numbers.sort()  # Aynı şekilde sayıları da artacak şekilde sıralandırma işlemini gerçekleştirebiliyoruz

print(friends)  
print(lucky_numbers)

lucky_numbers = [4,7,17,8,90,240]
# print(lucky_numbers.sort(reverse=True)) Bu şekilde kullanılmaz. Çıktısı None olur
lucky_numbers.sort(reverse=True) # Bu şekildeki kullanım ile azalan sıradan/tersten de yazdırabiliriz. Default olarak reveerse=False gelmektedir
print(lucky_numbers)

def takeSecond(elem): # takeSecond() diye elamanın index[1] deki değerini alan bir fonksiyon tanımladık
    return elem[1]

random = [(2, 2), (3, 4), (4, 1), (1, 3)]

random.sort(key=takeSecond) # sort() fonksiyonunun key parametresine bu fonksiyonu yazdık, buna göre işlem yap demek
print('Sorted list:', random) # Görüleceği üzere liste elamanlarını index[1] deki elemanlarına göre sıralamıştır

cities = ["Addis Ababa", "Tokyo", "Rome", "İstanbul", "Rio"]
new_cities = cities.sort(key=len)
new_cities2 = sorted(cities, key=len) # sorted() fonksiyonu ile bu sefer kelimelerin uzunluklarına göre sıralama işlemi yapabildik 

print(new_cities)
print(new_cities2)

lucky_numbers = [4,7,17,8,90,240]
lucky_numbers.reverse()  # Bu şekilde reverse() fonksiyonu ile listeyi tersten yazdırabiliriz

print(lucky_numbers)

# sorting using custom key
employees = [
    {'Name': 'Alan Turing', 'age': 25, 'salary': 10000},
    {'Name': 'Sharon Lin', 'age': 30, 'salary': 8000},
    {'Name': 'John Hopkins', 'age': 18, 'salary': 1000},
    {'Name': 'Mikhail Tal', 'age': 40, 'salary': 15000},
]

# custom functions to get employee info
def get_name(employee):
    return employee.get('Name')


def get_age(employee):
    return employee.get('age')


def get_salary(employee):
    return employee.get('salary')


# sort by name (Ascending order)
employees.sort(key=get_name)
print(employees, end='\n')

# sort by Age (Ascending order)
employees.sort(key=get_age)
print(employees, end='\n')

# sort by salary (Descending order)
employees.sort(key=get_salary, reverse=True)
print(employees, end='\n')

# Program to show the use of lambda functions
double = lambda x: x * 2

print(double(5))

Aşağıdaki gibi lambda() fonksiyonları kullanarak da yapabilirdik

employees = [
    {'Name': 'Alan Turing', 'age': 25, 'salary': 10000},
    {'Name': 'Sharon Lin', 'age': 30, 'salary': 8000},
    {'Name': 'John Hopkins', 'age': 18, 'salary': 1000},
    {'Name': 'Mikhail Tal', 'age': 40, 'salary': 15000},
]

# sort by name (Ascending order)
employees.sort(key=lambda x: x.get('Name')) # lambda fonksiyonları anlık tanımlanan fonksiyonlardır, lambda arguments: expression
print(employees, end='\n\n')

# sort by Age (Ascending order)
employees.sort(key=lambda x: x.get('age'))
print(employees, end='\n\n')

# sort by salary (Descending order)
employees.sort(key=lambda x: x.get('salary'), reverse=True)
print(employees, end='\n\n')

# The copy() method returns a shallow copy of the list.
# if you need the original list unchanged when the new list is modified, you can use the copy() method.

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]
friends2 = friends.copy() # Bu şekilde copy() fonksiyonu ile başka bir listeyi kopyalayabiliyoruz

print(friends2)

# shallow copy using the slicing syntax

# mixed list
list = ['cat', 0, 6.7]

# copying a list using slicing
new_list = list[:]

# Adding an element to the new list
new_list.append('dog')

# Printing new and old list
print('Old List:', list)
print('New List:', new_list)

# The extend() method adds all the elements of an iterable (list, tuple, string etc.) to the end of the list.  It doesn't return any value.

friends = ["Ahmet", "Mehmet", "Hasan", "Hüseyin", "Ali"]
lucky_numbers = [4,7,17,8,90,240]

friends.extend(lucky_numbers) # Bu şekilde extend() fonksiyonu ile birinci listeye ikinci listeyi kolaylıkla ekleyebiliriz

print(friends)

languages = ['French', 'English']
languages1 = ['Spanish', 'Portuguese']
languages.extend(languages1)

print('Languages List:', languages)

# The reverse() method reverses the elements of the list.
# The reverse() method doesn't take any arguments.
# The reverse() method doesn't return any value. It updates the existing list.

systems = ['Windows', 'macOS', 'Linux']
print('Original List:', systems)

systems.reverse()
print('Updated List:', systems)

reversed_list = systems[::-1] # Böylelikle reverse() fonksiyonu ile ters çevrilmiş listemizi tekrar orjinal haline getirmiş olduk
print('Reversed List:', reversed_list)

# If you need to access individual elements of a list in the reverse order, it's better to use reversed() function.

systems = ['Windows', 'macOS', 'Linux']

# Printing Elements in Reversed Order
for o in reversed(systems): # Bu da görüleceği üzere listeyi sondan başlayarak yazdırır
    print(o)

"""# **Slicing**"""

city = 'Phoenix'

print(city[:]) # Listenin tamamını aynen yazdırır, bu örnek için [0:7] ile aynıdır.
print(city[1:])  # starts from index 1 to the end (1 den başlayarak sonrası 1 dahil)
print(city[:6])  # starts from zero to 5th index  (6 dan öncesi 6 dahil değil (stop-1))
print(city[1::]) # 1 den başlayıp sonrasını yazar (step belirtilmemiş)
print(city[::1]) # (Baştan (index 0) başlayarak teker teker (by 1 step) yazar yani aynısı)
print(city[::2])  # starts from zero to end by 2 step (Baştan sona 2 şer atlayarak)
print(city[1::2])  # starts from index 1 to the end by 2 step (1 den başlayıp 2 şer 2 şer atlayarak)
print(city[-3:])  # starts from index -3 to the end (Kısacası son 3 karakter ya da sondan başla -3 den sonrası negatif indexler -1 den başlar)
print(city[::-1])  # negative step starts from the end to zero (Sondan başa doğru yazar) Eğer step - şeklinde ise başa doğru gidilir
print(city[::-2])

vegetable = 'Tomato'

print('length of the word', vegetable, 'is :', len(vegetable)) # len() fonksiyonu değişkenin karakter sayısını çıkartmak için kullanılır

# We can use + operator for combining the two string together without any spaces.
print('clarus' + 'way')

# We can also use * operator for repeating the string without any spaces.
print(3*'no way!')

fruit = 'Orange'
vegetable = 'Tomato'
print("using + :", fruit + vegetable)
print("using * :", 3 * fruit)

str_one = 'upper'
str_two = 'upper' * 3
str_comb = str_one * 3
print(str_one)
print(str_two)
print(str_comb)

print(* "clarusway") # * işareti kendisinden sonra gelen strngi elemanlarına ayırır. Sağ tarafta kullanılırsa error verir
print()
string_1 = "I'm hungary..."
print(*string_1)
print()
string_2 = '1453'
print(*string_2)
print()
string_3 = "joseph@clarusway.com"
print(*string_3)

fruit = 'orange'
fruit += ' apple'  # Bununla fruit değişkeninin değerine apple da ekle demektir

print(fruit)

fruit = 'orange'
fruit += ' apple'
fruit += ' banana'
fruit += ' apricot'

print(fruit)

fruit1 = 'Apple'
fruit2 = 'Orange'

print( 2*fruit1 + " " + 3*fruit2)

"""## **Stringlerde % Kullanımı**"""

# For now, we used only s, d and f characters to specify the data type in a string.

phrase = 'I have %d %s and %.2f brothers' % (4, "children", 5)  # Bu şekilde direk kullanımda değerleri () içerisinde belirtiyoruz 
print (phrase)

# In the '%s' syntax : s stands for 'string'.
# In the '%.2f' syntax : f stands for 'float'. In this example 2 digits after point.
# In the '%d' syntax : d stands for 'numeric'.

phrase = 'I have %(count_1)d %(count_2)s and %(count_3).2f brothers' % {'count_1': 4, 'count_2':"children", 'count_3': 5}  # Bu şekilde değişkenler aracılığıyla yazarken de {} içerisinde belirtiyoruz
print (phrase)                                                                                                             # Sadece d,f,s önüne değişken isimlerini ekliyoruz

print('I have %(count_1)d %(count_2)s and %(count_3).2f brothers' % {'count_1': 4, 'count_2':"children", 'count_3': 5} # Bu şekildeki bir kullanımda sonunda parantez unutulursa böyle hata verir.

sentence = "apologizing is a virtue"

print("%.11s" % sentence)  # we get first 11 characters of the string
print(sentence[0:11]) # İkisi de aynı işi yapar

x = "HelloWorld!"
print('%.4s' % x)

"""# **string.format() Kullanımı**"""

# As in this example below, the value of expression comes from .format() method in order. Curly braces 👉🏻{} receives values from .format().
# If you’ve written more variables than you need in the .format() method, the extra ones just will be ignored. 

fruit = 'Orange'
vegetable = 'Tomato'
amount = 4
print('The amount of {} we bought is {} pounds'.format(fruit, amount))  # .format() fonksiyonunun kullanımı, bu şekilde fonksiyon içindeki sıraya göre atar

# Using keywords in 👉🏻{} makes string more readable.
# Birden fazla değişken ile .format() fonksiyonunun kullanımı

print('{state} is the most {adjective} state of the {country}'.format(state='California', country='USA', adjective='crowded'))
# Bu şekildeki kullamımda hepsi değişkenlere atılmış olduğu için sıra farketmez

state='California' 
country='USA' 
adjective='crowded'

print('{} is the most {} state of the {}'.format(state, country, adjective)) 
# Bu şekilde de kullanılabilirdi, böyle olunca sırasıyla atar görüldüğü gibi,onun için bu kullanımda format() içine uygun yazmak gerekir
# If you have noticed, we do not have to write the keywords in .format() method in order.

"""**Note:** Positional arguments are arguments that can be called by their position in the function or method definition. Keyword arguments are arguments that can be called by their names."""

print('{0} is the most {adjective} state of the {country}'.format('California', country='USA', adjective='crowded'))

print('{1} is the most {adjective} state of the {country}'.format('California', 'Texas', country='USA', adjective='crowded'))

# Bu şekilde değerin  .format() fonksiyonu içerisindeki index numrası ile ilgili değeri çağırabiliriz. 0 yazaydık California gelirdi mesela
# Ayrıca bu şekildeki bir kullanımda tanımlanmamış olanlar (Positional arguments) tanımlanmış olanlardan (Keyword arguments)(country,adjective) her daim önce gelmelidir. Aksi takdirde "SyntaxError: positional argument follows keyword argument" hatası alınır                                                     
# Be careful not to write keyword arguments before positional arguments.

print("{}-{}-{}".format("12","Feb","Feb"))
print("{no}-{month}-{month}".format(no="12", month="Feb"))

print("{6} {0} {5} {3} {4} {1} {2}".format('have', 6, 'months', 'a job', 'in', 'found', 'I will'))
# Positional kullanımda bu şekilde index de belirtilebilir

phrase = '{2} {3} {1} {0}'.format('circumstances', 'in all', 'generosity', 'wins')
print(phrase)

print("{9} {7} {1} {10} {3} {2} {5} {8} {6} {0} {4}".format('in', 'know', 'bring', 'to', 'students.', 'out', 'best', 'teachers', 'the', 'Good', 'how'))

phrase = '{morality} {1} {0} {condition}'.format("in all", "wins", condition = 'circumstances', morality = 'genorosity')
print(phrase)
print()
phrase = '{morality} {} {} {condition}'.format("wins", "in all",  condition = 'circumstances', morality = 'genorosity')
print(phrase)
# İki şekilde de yapılabilir, önemli olan format() içerisinde !!! Be careful not to write keyword arguments before positional arguments.

money = 2000
total = 4,152.32 
percent = 11
day = 5
phrase = 'If we had bought ${} crypto coins at the weekend, we would have had ${} with a profit share of {}% after {} days'.format(money, total, percent, day)
print(phrase)

print('{1} {0} {2} {2} {3} {3} {2}'.format('hoşgelir', 'tren gelir', 'ley', 'lümü'))

print("{9} {7} {1} {10} {3} {2} {5} {8} {6} {0} {4}".format('in', 'know', 'bring', 'to', 'students.', 'out', 'best', 'teachers', 'the', 'Good', 'how'))

"""# **f-string Kullanımı**"""

# Aşağıdaki iki kullanımı daha önce görmüştük...

fruit = 'Orange'
vegetable = 'Tomato'
amount = 6
print("The amount of {} and {} we bought are totally {} pounds".format('Orange','Tomato',6))

print("The amount of {fruit} and {vegetable} we bought are totally {amount} pounds".format(fruit = 'Orange', vegetable = 'Tomato', amount = 6))

# f-string kullanımında ise: f-string is the string syntax that is enclosed in quotes with a letter f at the beginning. 
# Curly braces 👉🏻{} that contain variable names or expressions are used to replace with their values.

fruit = 'Orange'
vegetable = 'Tomato'
amount = 6
output = f"The amount of {fruit} and {vegetable} we bought are totally {amount} pounds" #f-string kullanımı bu şekildedir

print(output)

money = 2000
total = 4,152.32 
percent = 11
day = 5
phrase = 'If we had bought ${} crypto coins at the weekend, we would have had ${} with a profit share of {}% after {} days'.format(money, total, percent, day)
print(phrase)

phrase = 'If we had bought ${money} crypto coins at the weekend, we would have had ${total} \
 with a profit share of {percent}% after {day} days'.format(percent = "11", day = "5", total = "4,152.32", money = "2000")
print(phrase)

#Yukarıdaki örneklerin aynısını f-string ile yapacak olursak...
capital = 2000
total = "4,152.32"
rate = 11
duration = 5
output = f"If we had bought ${capital} crypto coins at the weekend, \ 
we would have had ${total} with a profit share of {rate}% after {duration} days." # Bu şekilde \ ile cümleye devam edebiliriz
print(output)

x = 2000
y = 4,152.32
z = 11
k = 5

print ("If we had bought ${} crypto coins at the weekend,\
 we would have had ${} with a profit \
 share of {}% after {} days.".format (x, y, z, k))

# You can use all valid expressions, variables, and even methods in curly braces.

result = f"{4 * 5}" 
print(result)

result_2 = f"{2**3}"
print(result_2)

# There is also a multiline f-string formatting style. Bu şekilde işlem yaparken satırlara bölebiliriz 

name = "Yaman"
job = "teachers"
domain = "Data Science"
message = (                 
     f"Hi {name}. "
     f"You are one of the {job} "
     f"in the {domain} section."
)                   # Bu şekildeki çoklu satır kullanımında () içerisinde yazmak ve her bir satırın başına f kullanmak şarttır
print(message)

# If you want to use multiple f-string formatting lines without parentheses, you will have the other option that you can use backslash 👉🏻\ between lines.

name = "Yaman"
job = "teachers"
domain = "Data Science"
message = f"Hi {name}. " \
          f"You are one of the {job} " \
          f"in the {domain} section."

print(message) #Bu şekilde \ kullandığımızda ise () içerisinde yazmamıza gerek yoktur

a = 11
b = 22
c = 33

output = (
    f"Benim {a} elmam \n" 
    f"{b} armutum ve \n"
    f"{c} kadar muzum var"
)   
print(output) # Bu şekilde \n ile alt satıra geçme işlemlerini yapabiliriz

name = "Susan"
age = "young"
gender = "lady"
school = "CLRWY IT university"
output = (
    f"{name} is a {age}"
    f"{gender} and she is "
    f"a student at the {school}" 
)
print(output)

# \ ile kullanımı

name = "Susan"
age = "young"
gender = "lady"
school = "CLRWY IT university"
output = f"{name} is a {age}" \
         f"{gender} and she is " \
         f"a student at the {school}" 

print(output)

first_name = 'Hüseyin'
last_name = 'Yaman'

# Aşağıdaki kodların hepsinin çıktısı aynıdır...

output1 = 'Hello, ' + first_name + ' ' + last_name
output2 = 'Hello, {} {}'.format(first_name, last_name)
output3 = 'Hello, {0} {1}'.format(first_name, last_name)
output4 = 'Hello, {1}, {0}'.format('Hüseyin', 'Yaman') #Burada indexler bilinçli olarak ters yazılmıştır
output5 = f'Hello, {first_name} {last_name}'  # Bu kullanım sadece Pyhton 3 de çalışmaktadır

print(output1)
print(output2)
print(output3)
print(output4)
print(output5)

"""**.format() ile Advanced String Kullanımları**"""

text = "{:.2f}, {:.3f}, {:.5f}".format(3.12345, 4.3456543, 5.3457654322) #Bu şekilde . sonrasında kaç basamak yazdıracağımızı belirleriz. (Yuvarlar)
print(text)

test = '{:.5}'.format(5.3457654322) # Ama bu şekildeki kullanımda noktadan sonra kaç basamak yazdıracağımız vakit . yı da sayar ve ona göre alır yine yuvarlar
print(test)                         # Görüleceği üzere yukarıdaki .5f kullanımından farklıdır

text = "{:.2s} - {:.3s} - {:.4s}".format("sdfghjhgf", "sthjkkljhgfd", "lkjhgfdfghjkjhg") #Bu şekilde stringin kaç harfini yazdıracağımızı da belirleyebiliriz. 
print(text)

test = '{:.5}'.format("sthjkkljhgfd") # Görüldüğü gibi string olunca . diye birşey olmadığı i.in direk ilk 5 harfi yazdırdı
print(test)

text = "{:>20}".format("Clarusway") # {:>20} kullanımı 20 karakterlik bir alan içerisinde sağa yaslamak için kullanılır
print(text)
print(len(text)) # Gerçekten alanın boyutunun ne kadar olduğunu göstermek için

text = "{:<30}".format("Clarusway") # {:<30} kullanımı 30 karakterlik bir alan içerisinde sola yaslamak için kullanılır
print(text)
print(len(text)) # Gerçekten alanın boyutunun ne kadar olduğunu göstermek için

text = "formatlama {:>20} formatlama".format('test') # Bu şekilde de kullanılabilir 
print(text)
print(len(text))

text = "{:<10} formatlama".format('test') # Görüleceği üzere test ten sonra alanı 10 a tamamlayan bir boşluk var
print(text)
print(len(text))

text = "{:^20}".format('deneme') # 20 karakterlik bir alanda 'deneme' kelimesi ortalansın demektir(center)
print(text)
print(len(text))

text = "formatlama {:^20} formatlama".format('test') # Bu şekilde de kullanılabilir
print(text)                                          # 10 + 1 + 20 + 1 + 10 = 42
print(len(text))

test = "{:.5}".format("hippotamus") #Başlangıçtan sadece 5 karakterini al demktir
print(test)

test = "{:10.3}".format("hippotamus") #10 karakterlik bir alanda baştan 3 karakterini almak demektir
print(test)

test = "{:>10.3}".format("hippotamus") #10 karakterlik bir alanda baştan 3 karakterini al ve 10 karakterlik bir alanda sağa yasla demektir
print(test)